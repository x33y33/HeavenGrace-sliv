import telebot
import time
import re
import threading
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from database import *
from settings import *
from messages import *

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    telegram_id = message.from_user.id
    args = message.text.split()

    if len(args) > 1:
        referrer_id = args[1]

        if str(telegram_id) != referrer_id and user_exists(referrer_id):
            if not user_exists(telegram_id):
                add_user(telegram_id, message.from_user.username)
                add_referral(telegram_id, referrer_id)
                increment_referral_count(referrer_id)
                
                count = get_count_ref(referrer_id)
                bot.send_message(referrer_id, f"üéâ –ú–∞–º–æ–Ω—Ç –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞: @{message.from_user.username} | {message.from_user.id} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –º–∞–º–æ–Ω—Ç–æ–≤: {count}")
                for admin in admins_id:
                    bot.send_message(admin, f"üéâ –ú–∞–º–æ–Ω—Ç –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞: @{message.from_user.username} | {message.from_user.id} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–º–æ–Ω—Ç–æ–≤ {referrer_id}: {count}")

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
                bot.send_message(telegram_id, "üëãüèª –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª–µ–π:\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —á–µ—Ç–∫–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π.")
                bot.register_next_step_handler(message, get_city)
            else:
                bot.send_message(telegram_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")    
                show_main_menu(telegram_id, message)
        else:
            bot.send_message(telegram_id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if not user_exists(telegram_id):
            add_user(telegram_id, message.from_user.username)
            bot.send_message(telegram_id, "üëãüèª –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª–µ–π:\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —á–µ—Ç–∫–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π.")
            bot.register_next_step_handler(message, get_city)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            show_main_menu(telegram_id, message)

def show_main_menu(telegram_id, message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    bot.delete_message(message.chat.id, message.message_id - 1  )
    with open("photo/start.mp4", "rb") as photo:
        bot.send_animation(telegram_id, photo, caption=start_message, reply_markup=create_main_menu())  
        
@bot.message_handler(commands=['ref_get'])
def send_ref_link(message):
    try:
        print(f"–ù–∞—á–∞–ª–∞—Å—å –≤—ã–¥–∞—á–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏! –í–æ—Ä–∫–µ—Ä: {message.from_user.username}")
        telegram_id = message.from_user.id
        username_bot = bot.get_me().username

        if username_bot:
            ref_link = f"https://t.me/{username_bot}?start={telegram_id}"
            bot.send_message(telegram_id, f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`", parse_mode='MarkDown')
            for admin in admins_id:
                bot.send_message(admin, f'üìå {message.from_user.username} –ü–æ–ª—É—á–∏–ª —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Ä–∫–∞.')
        else:
            bot.send_message(telegram_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞.")
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞.")
    except Exception as e:
        bot.send_message(telegram_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")  

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True)
    markup.add("üíù –ú–æ–¥–µ–ª–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    return markup

def get_city(message):
    telegram_id = message.from_user.id
    city = message.text
    worker_get = get_referral(telegram_id)

    with open("cities.txt", "r", encoding="utf-8") as file:
     cities = [line.strip() for line in file]

    city = re.sub(r'^(\w)(\w*)', lambda m: m.group(1).upper() + m.group(2).lower(), city)
    if city.upper() in [city.upper() for city in cities]:
        add_city(telegram_id, city)
        msg_success = bot.send_message(telegram_id, "‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.delete_message(telegram_id, msg_success.message_id)
        msg_returning = bot.send_message(telegram_id, "<i>–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...</i>", parse_mode='HTML')
        bot.delete_message(telegram_id, msg_returning.message_id)
        show_main_menu(telegram_id, message )
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç {message.from_user.username} –¥–æ–±–∞–≤–∏–ª –≥–æ—Ä–æ–¥ {city}.")
    else:
        bot.send_message(telegram_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, get_city)
    
def send_models_list(telegram_id, user_data):
    models_keyboard = types.InlineKeyboardMarkup()
    model_one_button = types.InlineKeyboardButton(text="(#1) ¬∑ –ê–ª—ë–Ω–∞ ¬∑ 19 –ª–µ—Ç", callback_data="model_one")
    model_two_button = types.InlineKeyboardButton(text="(#2) ¬∑ –í–∞—Å–∏–ª–∏—Å–∞ ¬∑ 25 –ª–µ—Ç", callback_data="model_two")
    model_three_button = types.InlineKeyboardButton(text="(#3) ¬∑ –î–∞—Ä—å—è ¬∑ 21 –≥–æ–¥", callback_data="model_three")
    model_four_button = types.InlineKeyboardButton(text="(#4) ¬∑ –ö—Å–µ–Ω–∏—è ¬∑ 18 –ª–µ—Ç", callback_data="model_four")
    model_five_button = types.InlineKeyboardButton(text="(#5) ¬∑ –ú–∞—Ä–∏–Ω–∞ ¬∑ 23 –≥–æ–¥–∞", callback_data="model_five")
    model_six_button = types.InlineKeyboardButton(text="(#6) ¬∑ –ö—Ä–∏—Å—Ç–∏–Ω–∞ ¬∑ 20 –ª–µ—Ç", callback_data="model_six")
    model_seven_button = types.InlineKeyboardButton(text="(#7) ¬∑ –ò—Ä–∏–Ω–∞ ¬∑ 23 –≥–æ–¥–∞", callback_data="model_seven")
    
    models_keyboard.add(model_one_button)
    models_keyboard.add(model_two_button)
    models_keyboard.add(model_three_button)
    models_keyboard.add(model_four_button)
    models_keyboard.add(model_five_button)
    models_keyboard.add(model_six_button)
    models_keyboard.add(model_seven_button)
    
    models_format = models_message.format(city=user_data[2])
    bot.send_message(telegram_id, models_format, reply_markup=models_keyboard)

@bot.message_handler(content_types=['text'])
def func(message):
    telegram_id = message.from_user.id

    if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user_data = user_check(telegram_id)
        if user_data:
            with open("photo/profile.mp4", "rb") as photo:
                bot.send_animation(telegram_id, photo, caption=get_user_data(user_data))
        else:
            bot.send_message(telegram_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif message.text == "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üõ° –ì–∞—Ä–∞–Ω—Ç–∏–∏", url="https://telegra.ph/Polzovatelskoe-soglashenie-dlya-klientov-01-14-2"))
        markup.add(types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", url="https://t.me/HeavenGrace_Reviews"))
        with open("photo/info.mp4", "rb") as photo:
            bot.send_animation(telegram_id, photo, caption=info_message, reply_markup=markup)

    elif message.text == "üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/Dope_Support"))
        with open("photo/support.mp4", "rb") as photo:
            bot.send_animation(telegram_id, photo, caption=support_message, reply_markup=markup)

    elif message.text == "üíù –ú–æ–¥–µ–ª–∏":
        user_data = user_check(telegram_id)

        if user_data:
            send_models_list(telegram_id, user_data)
        else:
            bot.send_message(telegram_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –º–æ–¥–µ–ª–µ–π.")

model_prices_1_hour = {
    "model1": 6450,
    "model2": 5400,
    "model3": 5240,
    "model4": 6270,
    "model5": 5700,
    "model6": 7670,
    "model7": 3400
}


model_prices_2_hours = {
    "model1": 12700,
    "model2": 9450,
    "model3": 9170,
    "model4": 12450,
    "model5": 9975,
    "model6": 15890,
    "model7": 7000
}


model_prices_night = {
    "model1": 26400,
    "model2": 15260,
    "model3": 20960,
    "model4": 23100,
    "model5": 22800,
    "model6": 26200,
    "model7": 13000
}


selected_models = {}

def get_selected_model(telegram_id):
    return selected_models.get(telegram_id, "model1")

def set_selected_model(telegram_id, model):
    selected_models[telegram_id] = model

selected_durations = {}

def set_selected_duration(telegram_id, duration):
    selected_durations[telegram_id] = duration

def get_selected_duration(telegram_id):
    return selected_durations.get(telegram_id, "1 —á–∞—Å") 


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    telegram_id = call.from_user.id
    worker_get = get_referral(telegram_id)
    if call.data == "model_one":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #1.")
        set_selected_model(telegram_id, "model1")
        model1s = model1.format(city=user_check(telegram_id)[2])
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_1")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)
        with open("photo/model1.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model1s, reply_markup=markup)

    elif call.data == "model_two":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #2.")
        set_selected_model(telegram_id, "model2")
        model2s = model2.format(city=user_check(telegram_id)[2])
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_2")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)
        with open("photo/model2.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model2s, reply_markup=markup)

    elif call.data == "model_three":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #3.")
        set_selected_model(telegram_id, "model3")
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_3")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)  
        model3s = model3.format(city=user_check(telegram_id)[2])
        with open("photo/model3.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model3s, reply_markup=markup)

    elif call.data == "model_four":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #4.")
        set_selected_model(telegram_id, "model4")
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_4")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)      
        model4s = model4.format(city=user_check(telegram_id)[2])
        with open("photo/model4.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model4s, reply_markup=markup)

    elif call.data == "model_five":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #5.")
        set_selected_model(telegram_id, "model5")
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_5")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)
        model5s = model5.format(city=user_check(telegram_id)[2])
        with open("photo/model5.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model5s, reply_markup=markup)

    elif call.data == "model_six":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #6.")
        set_selected_model(telegram_id, "model6")
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_6")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)
        model6s = model6.format(city=user_check(telegram_id)[2])
        with open("photo/model6.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model6s, reply_markup=markup)

    elif call.data == "model_seven":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å #7.")
        set_selected_model(telegram_id, "model7")
        markup = types.InlineKeyboardMarkup(row_width=1)
        order_button = types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="order_model_7")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup.add(order_button, back)
        model7s = model7.format(city=user_check(telegram_id)[2])
        with open("photo/model7.jpg", "rb") as photo:
            bot.send_photo(telegram_id, photo, caption=model7s, reply_markup=markup) 

    elif call.data == "order_model_1":
          with open("photo/model1.jpg", "rb") as photo:
           bot.delete_message(call.message.chat.id, call.message.message_id)
           if worker_get:
            bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #1.")
           markup_time = types.InlineKeyboardMarkup(row_width=1)
           time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
           time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
           time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
           back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
           markup_time.add(time_1, time_2, time_3, back)
           bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 1*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_2":
          with open("photo/model2.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #2.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back)
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 2*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_3":
          with open("photo/model3.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #3.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back)
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 3*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_4":
          with open("photo/model4.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #4.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back)
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 4*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_5":
          with open("photo/model5.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #5.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back)
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 5*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_6":
          with open("photo/model6.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #6.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back    )
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 6*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")

    elif call.data == "order_model_7":
          with open("photo/model7.jpg", "rb") as photo:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if worker_get:
                bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É  –º–æ–¥–µ–ª—å #7.")
            markup_time = types.InlineKeyboardMarkup(row_width=1)
            time_1 = types.InlineKeyboardButton(text="üåá 1 —á–∞—Å", callback_data="time_1")
            time_2 = types.InlineKeyboardButton(text="üèô 2 —á–∞—Å–∞", callback_data="time_2")
            time_3 = types.InlineKeyboardButton(text="üåÉ –ù–æ—á—å", callback_data="night")
            back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
            markup_time.add(time_1, time_2, time_3, back)
            bot.send_photo(call.message.chat.id, photo, caption="üõçÔ∏è *–ú–æ–¥–µ–ª—å 7*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=markup_time, parse_mode="Markdown")
    elif call.data == "time_1":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É 1 —á–∞—Å.")
        set_selected_duration(telegram_id, "1 —á–∞—Å")
        markup_pay_method = types.InlineKeyboardMarkup(row_width=1)
        card = types.InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="card")
        cash = types.InlineKeyboardButton(text="üí∞ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="cash")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup_pay_method.add(card, cash, back)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup_pay_method, parse_mode="HTML")
    elif call.data == "time_2":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É 2 —á–∞—Å–∞.")
        set_selected_duration(telegram_id, "2 —á–∞—Å–∞")
        markup_pay_method = types.InlineKeyboardMarkup(row_width=1)
        card = types.InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="card")
        cash = types.InlineKeyboardButton(text="üí∞ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="cash")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup_pay_method.add(card, cash, back)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup_pay_method, parse_mode="HTML")
    elif call.data == "night":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if worker_get:
            bot.send_message(worker_get, f"üî• –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –≤—ã–±—Ä–∞–ª –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–æ—á—å.")
        set_selected_duration(telegram_id, "–Ω–æ—á—å")
        markup_pay_method = types.InlineKeyboardMarkup(row_width=1)
        card = types.InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="card")
        cash = types.InlineKeyboardButton(text="üí∞ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="cash")
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        markup_pay_method.add(card, cash, back)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup_pay_method, parse_mode="HTML")
    elif call.data == "card":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        model = get_selected_model(telegram_id)
        duration = get_selected_duration(telegram_id)
        if duration == "1 —á–∞—Å":
            price = model_prices_1_hour.get(model, 0)
        elif duration == "2 —á–∞—Å–∞":
            price = model_prices_2_hours.get(model, 0)
        elif duration == "–Ω–æ—á—å":
            price = model_prices_night.get(model, 0)
        else:
            price = 0
        card_method = f"""
<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:</b>

–°—É–º–º–∞: <code>{price}</code>‚ÇΩ

<b>‚óΩÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:</b>
<b>‚î£</b> –ò–º—è –§–∞–º–∏–ª–∏—è
<b>‚î£</b> –ë–ê–ù–ö
<b>‚îó</b> <code>–ù–æ–º–µ—Ä –ö–∞—Ä—Ç—ã</code>

‚ö†Ô∏è <i>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç!</i>
‚ö†Ô∏è <i>–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>
‚ö†Ô∏è <i>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞</i>
"""
        if worker_get:
            bot.send_message(worker_get, f"üí´ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.")
        for admin in admins_id:
            bot.send_message(admin, f"üë§ –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n\n–í–æ—Ä–∫–µ—Ä: {worker_get}")
        markup_check = types.InlineKeyboardMarkup(row_width=1)
        check_pay = types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check")
        decline = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")
        markup_check.add(check_pay, decline)
        bot.send_message(telegram_id, card_method, reply_markup=markup_check, parse_mode="HTML")
    elif call.data == "cash":
        bot.answer_callback_query(callback_query_id=call.id, text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –º–µ—Ä–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", show_alert=True)
    elif call.data == "check":
        for admin in admins_id:
            bot.send_message(admin, f"üåà –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n‚öôÔ∏è –í–æ—Ä–∫–µ—Ä: {worker_get}")
        if worker_get:
          bot.send_message(worker_get, f"üåà –ú–∞–º–æ–Ω—Ç @{call.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è - @kalipsom")
        bot.answer_callback_query(callback_query_id=call.id, text="‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É", show_alert=True)
    elif call.data == "back":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        bot.delete_message(call.message.chat.id, call.message.message_id)
        user_data = user_check(telegram_id) 
        send_models_list(telegram_id, user_data)



def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"Error running bot: {e}")
            time.sleep(1)  # wait for 1 second before retrying

if __name__ == '__main__':
    # create and start the bot thread
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # keep the script running indefinitely
    while True:
        pass